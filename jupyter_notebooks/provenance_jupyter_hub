# Spectroscopy Data Visualization - RSpace Integration Example
# This notebook creates publication-ready plots from spectroscopy data
%pip install -q pandas
%pip install -q matplotlib
%pip install -q scipy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
import datetime

# Set publication-ready style
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3
plt.rcParams['font.size'] = 10

# client uses direct RSpace file access to download file to jupyterLab file system
# client = get_rspace_client()
# raw_temp_data = client.download_file("GL408", "spectroscopy_data.csv")
data = pd.read_csv('spectroscopy_data.csv')

print("=== RSpace Spectroscopy Visualization Workflow ===")
print(f"Visualization started: {datetime.datetime.now()}")
print(f"Dataset shape: {data.shape}")
print(f"Wavelength range: {data['Wavelength'].min()}-{data['Wavelength'].max()} nm")

# Background correction
data['Sample_A_Corrected'] = data['Sample_A_Abs'] - data['Background']
data['Sample_B_Corrected'] = data['Sample_B_Abs'] - data['Background']
data['Sample_C_Corrected'] = data['Sample_C_Abs'] - data['Background']

# Create comprehensive visualization suite
fig = plt.figure(figsize=(15, 12))

# 1. Main absorption spectra
ax1 = plt.subplot(3, 2, 1)
ax1.plot(data['Wavelength'], data['Sample_A_Corrected'], 'b-', linewidth=2, label='Sample A (10.5 μM)')
ax1.plot(data['Wavelength'], data['Sample_B_Corrected'], 'g-', linewidth=2, label='Sample B (5.2 μM)')
ax1.plot(data['Wavelength'], data['Sample_C_Corrected'], 'r-', linewidth=2, label='Sample C (18.7 μM)')
ax1.set_xlabel('Wavelength (nm)')
ax1.set_ylabel('Absorbance (AU)')
ax1.set_title('UV-Vis Absorption Spectra (Background Corrected)')
ax1.legend()
ax1.grid(True, alpha=0.3)

# 2. Peak analysis
ax2 = plt.subplot(3, 2, 2)
# Find peaks for Sample C (highest concentration)
peaks_c, _ = find_peaks(data['Sample_C_Corrected'], height=0.1, distance=10)
ax2.plot(data['Wavelength'], data['Sample_C_Corrected'], 'r-', linewidth=2, label='Sample C')
ax2.plot(data['Wavelength'].iloc[peaks_c], data['Sample_C_Corrected'].iloc[peaks_c], 'ro', markersize=8, label='Detected Peaks')
ax2.set_xlabel('Wavelength (nm)')
ax2.set_ylabel('Absorbance (AU)')
ax2.set_title('Peak Analysis - Sample C')
ax2.legend()
ax2.grid(True, alpha=0.3)

# Add peak annotations
for i, peak_idx in enumerate(peaks_c):
    ax2.annotate(f'{data["Wavelength"].iloc[peak_idx]:.0f} nm\n{data["Sample_C_Corrected"].iloc[peak_idx]:.3f} AU',
                xy=(data['Wavelength'].iloc[peak_idx], data['Sample_C_Corrected'].iloc[peak_idx]),
                xytext=(10, 10), textcoords='offset points', fontsize=9,
                bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))

# 3. Concentration vs Max Absorbance
ax3 = plt.subplot(3, 2, 3)
concentrations = [5.2, 10.5, 18.7]  # B, A, C
max_abs = [data['Sample_B_Corrected'].max(),
           data['Sample_A_Corrected'].max(),
           data['Sample_C_Corrected'].max()]

# Linear regression for Beer's law
slope, intercept = np.polyfit(concentrations, max_abs, 1)
r_squared = np.corrcoef(concentrations, max_abs)[0, 1]**2

ax3.scatter(concentrations, max_abs, s=100, alpha=0.7)
x_line = np.linspace(0, 20, 100)
y_line = slope * x_line + intercept
ax3.plot(x_line, y_line, 'r--', alpha=0.8, label=f'Linear fit (R² = {r_squared:.3f})')
ax3.set_xlabel('Concentration (μM)')
ax3.set_ylabel('Maximum Absorbance (AU)')
ax3.set_title('Beer\'s Law Calibration')
ax3.legend()
ax3.grid(True, alpha=0.3)

# Add equation annotation
ax3.text(0.05, 0.95, f'y = {slope:.4f}x + {intercept:.4f}',
         transform=ax3.transAxes, fontsize=10,
         bbox=dict(boxstyle='round,pad=0.3', facecolor='lightblue', alpha=0.7))

# 4. Raw vs Background-corrected comparison
ax4 = plt.subplot(3, 2, 4)
ax4.plot(data['Wavelength'], data['Sample_A_Abs'], 'b--', alpha=0.7, label='Raw Sample A')
ax4.plot(data['Wavelength'], data['Sample_A_Corrected'], 'b-', linewidth=2, label='Corrected Sample A')
ax4.plot(data['Wavelength'], data['Background'], 'k:', linewidth=2, label='Background')
ax4.set_xlabel('Wavelength (nm)')
ax4.set_ylabel('Absorbance (AU)')
ax4.set_title('Background Correction Effect')
ax4.legend()
ax4.grid(True, alpha=0.3)

# 5. Heatmap of all samples (using matplotlib instead of seaborn)
ax5 = plt.subplot(3, 2, 5)
heatmap_data = np.array([data['Sample_A_Corrected'],
                        data['Sample_B_Corrected'],
                        data['Sample_C_Corrected']])
im = ax5.imshow(heatmap_data, cmap='viridis', aspect='auto')
ax5.set_yticks([0, 1, 2])
ax5.set_yticklabels(['Sample A', 'Sample B', 'Sample C'])
ax5.set_xticks(range(0, len(data), 5))
ax5.set_xticklabels(data['Wavelength'][::5].astype(int))
ax5.set_title('Absorption Intensity Heatmap')
ax5.set_xlabel('Wavelength (nm)')
plt.colorbar(im, ax=ax5, label='Absorbance (AU)')

# 6. Derivative spectra for peak resolution
ax6 = plt.subplot(3, 2, 6)
# Calculate first derivative
deriv_a = np.gradient(data['Sample_A_Corrected'])
deriv_b = np.gradient(data['Sample_B_Corrected'])
deriv_c = np.gradient(data['Sample_C_Corrected'])

ax6.plot(data['Wavelength'], deriv_a, 'b-', linewidth=2, label='Sample A')
ax6.plot(data['Wavelength'], deriv_b, 'g-', linewidth=2, label='Sample B')
ax6.plot(data['Wavelength'], deriv_c, 'r-', linewidth=2, label='Sample C')
ax6.axhline(y=0, color='k', linestyle='--', alpha=0.5)
ax6.set_xlabel('Wavelength (nm)')
ax6.set_ylabel('First Derivative (dA/dλ)')
ax6.set_title('First Derivative Spectra')
ax6.legend()
ax6.grid(True, alpha=0.3)

plt.tight_layout()

# TODO: This would be automatically synced to RSpace
# rspace_client.add_plot_to_document(document_id="SD12345", plot=fig,
#                                   title="Complete Spectroscopy Analysis")
plt.savefig('spectroscopy_analysis_suite.png', dpi=300, bbox_inches='tight')
plt.show()

# Generate summary statistics table
summary_stats = {
    'Sample': ['A', 'B', 'C'],
    'Concentration_uM': [10.5, 5.2, 18.7],
    'Max_Absorbance': [data['Sample_A_Corrected'].max(),
                       data['Sample_B_Corrected'].max(),
                       data['Sample_C_Corrected'].max()],
    'Peak_Wavelength': [data.loc[data['Sample_A_Corrected'].idxmax(), 'Wavelength'],
                        data.loc[data['Sample_B_Corrected'].idxmax(), 'Wavelength'],
                        data.loc[data['Sample_C_Corrected'].idxmax(), 'Wavelength']],
    'Peak_Width_FWHM': [15.2, 14.8, 16.1]  # Would be calculated from actual peak analysis
}

summary_df = pd.DataFrame(summary_stats)
summary_df['Max_Absorbance'] = summary_df['Max_Absorbance'].round(3)

print("\n=== Analysis Summary for RSpace ===")
print(summary_df.to_string(index=False))

# TODO: Metadata would be automatically captured by RSpace
visualization_metadata = {
    'notebook_version': '2.1',
    'execution_time': datetime.datetime.now(),
    'input_file_checksum': 'def456',  # Would be calculated by RSpace
    'plots_generated': [
        'UV-Vis Absorption Spectra',
        'Peak Analysis',
        'Beer\'s Law Calibration',
        'Background Correction Comparison',
        'Absorption Heatmap',
        'First Derivative Spectra'
    ],
    'key_results': [
        f"Linear calibration R² = {r_squared:.3f}",
        f"Peak wavelengths: {data.loc[data['Sample_C_Corrected'].idxmax(), 'Wavelength']:.0f} nm",
        f"Molar absorptivity: {slope:.2f} L/(mol·cm)"
    ]
}

print(f"\nVisualization completed: {visualization_metadata['execution_time']}")
print("All plots ready for RSpace document integration!")