import json
%pip install -q rspace-client==2.6.1
%pip install -q pickleshare
try:
    from notebook import app
except:
    %conda install -q notebook
%pip install -q keyring
from rspace_client.eln import eln
import os
import hashlib
import json
%pip install -q dill
import dill
%pip install -q ipynbname
import ipynbname
%pip install -q ipylab
from ipylab import JupyterFrontEnd
import traceback
%pip install -q lxml
from bs4 import BeautifulSoup
import nbformat
import asyncio

RSPACE_DOC_FOR_NOTEBOOK = 'rspace_doc_for_notebook'
ATTACHMENTS_FOR_NOTEBOOK = 'attachments_for_notebook'
GALLERY_FILE_FOR_NOTEBOOK = 'gallery_file_for_notebook'

# TODO - Your RSpace instance goes here
RSPACE_URL='https://researchspace2.eu.ngrok.io/'

rspace_client = None
app = JupyterFrontEnd()


def get_notebook_name():
    nb_fname = ipynbname.name()
    nb_path = str(ipynbname.path())
    ext_pos=(''+nb_path).rfind('.')
    ext=nb_path[ext_pos:]
    # print(f"{ext=}")
    # print(f"{nb_fname=}")
    # print(f"{nb_path=}")
    return {'name':nb_fname+ext, 'part_name':nb_fname,'path':nb_path}

def get_password():
    """
    Retrieves password from (or saves a new password to) keyring
    """
    try:
        import getpass
        import keyring

        # TODO - Define the service name (e.g., the notebook name the secret is for)
        service_id = "RSpaceJupyterDemoApp"
        # TODO - Define the username associated with the secret
        username = "myuser"  # use your own username

        retrieved_password = keyring.get_password(service_id, username)
        if retrieved_password is None:
            retrieved_password = getpass.getpass("Please enter your RSpace Api key: ")
            keyring.set_password(service_id, username, retrieved_password)
        return retrieved_password
    except Exception as e:
        print(f"Error getting password: {e}")
        return None

def get_rspace_client():
    """
    Returns rspace ELN API client
    """
    try:
        global rspace_client
        if rspace_client is None:
            retrieved_password = get_password()
            rspace_client = eln.ELNClient(RSPACE_URL, retrieved_password)
            print(rspace_client.get_status())
        return rspace_client
    except Exception as e:
        print(traceback.format_exc())
        print(f"Error connecting to RSpace: {e}")
        return None

def save_rspace_data_ids(rspace_doc, attachments, gallery_file):
    # Define the filename to save the state
    state_filename = get_notebook_name()['part_name']+"_state.pkl"

    # Save the variables to the file using dill
    with open(state_filename, 'wb') as f:
        dill.dump({RSPACE_DOC_FOR_NOTEBOOK: rspace_doc, ATTACHMENTS_FOR_NOTEBOOK: attachments, GALLERY_FILE_FOR_NOTEBOOK: gallery_file}, f)
    print(f"Variables saved to {state_filename}")

def load_data():
    # Define the filename where the state was saved
    state_filename = get_notebook_name()['part_name']+"_state.pkl"

    # Check if the state file exists before attempting to load
    if os.path.exists(state_filename):
        # Load the variables from the file using dill
        with open(state_filename, 'rb') as f:
            try:
                loaded_state = dill.load(f)
            except Exception as e:
                loaded_state = {}
    else:
        print(f"State file '{state_filename}' not found. No variables loaded.")
    return loaded_state

async def save_notebook():
    app.commands.execute('docmanager:save')
    # 'docmanager:save' does not hook into any callback when the document is actually saved
    await asyncio.sleep(1)

async def reload_notebook():
    app.commands.execute('docmanager:reload')
    # 'docmanager:reload' does not hook into any callback when the document is actually reloaded
    await asyncio.sleep(1)

def make_metadata_cell(text):
    loaded_state = load_data()
    raw_notebook_file_id = loaded_state.get(RSPACE_DOC_FOR_NOTEBOOK)
    attachment_file_id = loaded_state.get(ATTACHMENTS_FOR_NOTEBOOK)
    gallery_file_id = loaded_state.get(GALLERY_FILE_FOR_NOTEBOOK)

    meta_data_cell = nbformat.v4.new_raw_cell(text)
    galery_doc_link = f'"<a href="{RSPACE_URL}gallery/item/{gallery_file_id}" target="_blank">This Notebook in RSpace</a>'
    meta_data_cell['source'] = text + ' ' + galery_doc_link
    meta_data_cell['metadata'] = {"rspace_metadata": {"documentFor": "docid","notebook_file":"docid", "attachments": ["attch1","attach2"]} }
    return meta_data_cell

async def add_to_notebook_metadata(fname, text):
    await save_notebook()
    with open(fname, 'r') as original:
        nb = nbformat.read(original, nbformat.NO_CONVERT)
        meta_data_cell = make_metadata_cell(text)
        replaced = False
        for i, cell in enumerate(nb['cells']):
            # print(f"Cell {i+1}:")
            # print(cell['metadata'])
            if 'rspace_metadata' in cell['metadata']:
                nb["cells"][i] = meta_data_cell
                replaced = True
        if replaced is False:
            nb["cells"].extend([meta_data_cell])
    with open(fname, 'w', encoding='utf-8') as modified:
        nbformat.write(nb, modified)
    await reload_notebook()

def make_content(gallery_file_id,attachment_file_id):
    content = f"""
                <fileId={gallery_file_id}>
                <fileId={attachment_file_id}>
                """
    return content

def remove_jupyter_attachment_divs(content, gallery_file_id, attachment_file_id):
    soup = BeautifulSoup(content, 'html.parser')
    attachment_divs = soup.find_all("div", {"class": "attachmentDiv"})
    for attachment_div in attachment_divs:
        href_tag = attachment_div.find('a')
        attachment_link = '/Streamfile/' + str(attachment_file_id)
        gallery_link = '/Streamfile/' + str(gallery_file_id)
        if attachment_link == href_tag['href'] or gallery_link == href_tag['href']:
            attachment_div.decompose()
    return soup.prettify()

async def get_notebook():
    raw_notebook_file_id = None
    attachment_file_id = None
    gallery_file_id = None
    """
    Saves notebook using ipylab and then writes notebook to Rspace document as
    an attachment
    """
    await save_notebook()
    try:
        loaded_state = load_data()
        raw_notebook_file_id = loaded_state.get(RSPACE_DOC_FOR_NOTEBOOK)
        attachment_file_id = loaded_state.get(ATTACHMENTS_FOR_NOTEBOOK)
        gallery_file_id = loaded_state.get(GALLERY_FILE_FOR_NOTEBOOK)

        current_notebook = get_notebook_name()['name']
        location = os.getcwd()
        attachedData = "spectroscopy_data.csv"  # FIXME
        attachments = None
        updateDocAttachments = False
        if raw_notebook_file_id is not None:
            print(f"A document with attachement to this notebook saved previously with RSpaceID {raw_notebook_file_id}" )
        else:
            print("NO document with attachement to this notebook saved previously in RSpace")
        if gallery_file_id is not None:
            print(f"This notebook saved previously to Gallery with RSpaceID {gallery_file_id}" )
        else:
            print("Notebook not previously saved to RSpace Gallery")
        with open(attachedData, 'r', encoding='utf-8') as attch:
            client = get_rspace_client()
            if attachment_file_id is None:
                print('start upload attachments')
                attachment_file = client.upload_file(attch)['id']
                print(f"Attachment file ID is: {attachment_file}")
                print('done upload attachments')
            else:
                print('start update attachments')
                attachment_file = client.update_file(attch,attachment_file_id)['id']
                print(f"Attachment file ID is: {attachment_file}")
                print('done update attachments')
        attachment_file_id = attachment_file
        with open(current_notebook, 'r', encoding='utf-8') as f:
            client = get_rspace_client()
            if gallery_file_id is None:
                print('start upload to gallery')
                gallery_file = client.upload_file(f)['id']
                print(f"Gallery file ID is: {gallery_file}")
                print('done upload to gallery')
            else:
                print('start update to gallery')
                gallery_file = client.update_file(f,gallery_file_id)['id']
                print('end update to gallery')
                print(f"Gallery file ID is: {gallery_file}")
            gallery_file_id = gallery_file
            if raw_notebook_file_id is None:
                new_doc = client.create_document(name="DocumentFor_"+current_notebook,tags = ["Python", "API", "Jupyter"] )
                raw_notebook_file_id = new_doc['id']
                content = make_content(gallery_file_id,attachment_file_id)
                client.append_content(new_doc['id'], content)
                print(f"New document with this notebook as attachement has ID: {new_doc['id']}")
            else:
                previous_content = client.get_document(raw_notebook_file_id)['fields'][0]['content']
                # print(f"previous content BEFORE metadata removed : {previous_content}")
                previous_content = remove_jupyter_attachment_divs(previous_content, gallery_file_id, attachment_file_id)
                # print(f"previous content after metadata removed : {previous_content}")
                new_content = previous_content + make_content(gallery_file_id,attachment_file_id)
                updated_doc = client.update_document(raw_notebook_file_id,tags = ['Python', 'API', 'Jupyter'], fields = [{"content": new_content}])
                # client.append_content(updated_doc['id'], content)
                raw_notebook_file_id = updated_doc['id']
                print(f"Updated document with this notebook as attachement has ID: {updated_doc['id']}")
            save_rspace_data_ids(raw_notebook_file_id, attachment_file_id, gallery_file_id)
            await add_to_notebook_metadata(current_notebook, location)
            # with open(current_notebook, 'r', encoding='utf-8') as f:
            #     notebook_dict = json.load(f)
            #     docName = f.name
            #     client = get_rspace_client()
            #     if(raw_notebook_file_id):
            #         print('start doc update')
            #         raw_data_file = client.update_document(
            #             raw_notebook_file_id,
            #             name = docName,
            #             tags = ["Python", "API", "example"],
            #             fields = [{"content": json.dumps(notebook_dict)}],
            #         )
            #         print(f"Updated notebook: {current_notebook}")
            #     else:
            #         raw_data_file = client.create_document(
            #             name = docName,
            #             tags = ["Python", "API", "example"],
            #             fields = [{"content": json.dumps(notebook_dict)}],
            #         )
            #         print(json.dumps(notebook_dict))
            #         print(f"Created notebook: {current_notebook}")
            # raw_notebook_file_id = raw_data_file['id']
            # print(raw_notebook_file_id)

    except Exception as e:
        print(traceback.format_exc())
        print(f"Error reading notebook file: {e}")
        return None

await get_notebook()

